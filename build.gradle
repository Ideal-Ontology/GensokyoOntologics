buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven {
            url "https://libraries.minecraft.net"
            // 跳过证书验证
            allowInsecureProtocol = true
        }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'com.github.johnrengelman:shadow:8.1.1'
        classpath 'org.joml:joml:1.10.4'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// mixin {
//     config 'mixins.gensokyoontology.json'
//     add sourceSets.main, "mixins.gensokyoontology.refmap.json"
//     add sourceSets.main, "patchouli.refmap.json"
// }

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' } // 合并所有阿里云源
        maven { url 'https://www.jitpack.io' }
        mavenLocal()
        mavenCentral()
    }
}

group = 'com.github.thelawf'
version = 'forge-1.16.5-alpha-0.0.805'

repositories {
    maven { url "https://jcenter.bintray.com/" } // 必要！
    maven { url 'https://maven.blamejared.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

java {
    archivesBaseName = 'gensokyoontology'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}
// jarJar.enable()

minecraft {

    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {
            property 'assetDirectory', file('run/assets')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'assetDirectory', file('run/assets')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gensokyoontology', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:

    mavenCentral()
    maven {
        name 'Jared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
}

dependencies {

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:")

    implementation 'org.jetbrains:annotations:24.0.0'
//    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:touhou-little-maid-355044:4968573")

    if  (project.gradle.startParameter.taskNames[0] == "build" || project.gradle.startParameter.taskNames[0] == "publish"){
        embed 'org.joml:joml:1.10.4'
    }
    else {
        implementation 'org.joml:joml:1.10.4'
    }

    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153")

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}


// Example for how to get properties into the manifest for reading at runtime.
jar {

    manifest {
        attributes([
                "Specification-Title"     : "gensokyoontology",
                //"Specification-Vendor": "gensokyoontology authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "gensokyoontology authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from(provider {configurations.embed.collect {it.isDirectory() ? it : zipTree(it)}})
}
jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
