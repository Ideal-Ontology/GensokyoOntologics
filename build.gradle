buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven { url = 'https://maven.aliyun.com/repository/jcenter' }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'com.github.johnrengelman:shadow:8.1.1'
        classpath 'org.joml:joml:1.10.4'
    }
}

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.+'
    id 'java'
}

mixin {
    // add sourceSets.main, "mixins.gensokyoontology.refmap.json"
    // config 'mixins.gensokyoontology.json'
    add sourceSets.main, "patchouli.refmap.json"

}

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'https://www.jitpack.io' }
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }
}

group = 'com.github.thelawf'
version = 'forge-1.16.5-preview-0.0.804'

repositories {
    maven { url 'https://maven.blamejared.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

java {
    archivesBaseName = 'gensokyoontology'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

configurations {
    embed
    implementation.extendsFrom(embed)
}
// jarJar.enable()

minecraft {

    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'


            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'gensokyoontology', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                gensokyoontology {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:

    mavenCentral()
    maven {
        name 'Jared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
}

dependencies {

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.3:")

    implementation 'org.joml:joml:1.10.4'
    implementation 'org.jetbrains:annotations:23.0.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:touhou-little-maid-355044:4968573")

    if  (project.gradle.startParameter.taskNames[0] == "build" || project.gradle.startParameter.taskNames[0] == "publish"){
        embed 'org.dom4j:dom4j:[2.1,2.3)'
    }
    else {
        implementation 'org.dom4j:dom4j:[2.1,2.3)'
    }

    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153")

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

//jarJar.fromRuntimeConfiguration()
//jarJar {
//    dependencies {
//        include (dependency('org.dom4j:dom4j:2.1.3'))
//    }
//}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "gensokyoontology",
                //"Specification-Vendor": "gensokyoontology authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "gensokyoontology authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from(provider {configurations.embed.collect {it.isDirectory() ? it : zipTree(it)}})
}
jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16
